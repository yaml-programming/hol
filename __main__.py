import fileinput
import sys

import yaml
from nx_yaml import NxSafeDumper, NxSafeLoader
import networkx as nx
import matplotlib.pyplot as plt
from discopy import cat, monoidal, frobenius

Id = monoidal.Id
Ty = monoidal.Ty

class Sig(monoidal.Bubble):
    """
    The frobenius signature based on a directed graph
    An arrow in the free category generated by the signature
    """
    def __init__(self, graph: nx.DiGraph):
        diagram = Id().tensor(*(
            monoidal.Box(
                node,
                Ty(*sorted(graph.predecessors(node))),
                Ty(*sorted(graph.successors(node))))
            if node else Id()
            for node in sorted(graph.nodes)))
        super().__init__(diagram,
                         dom=Ty(),#*sorted(n for n in graph.nodes if graph.in_degree(n) == 0)),
                         cod=Ty())#*sorted(n for n in graph.nodes if graph.out_degree(n) == 0)))

def compose_all():
    for f in sys.argv[1:]:
        yield from yaml.compose_all(open(f), Loader=NxSafeLoader)

G = Id()
for H in compose_all():
    G >>= Sig(H)
    G.draw()
