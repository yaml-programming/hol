import fileinput
import sys

import yaml
from nx_yaml import NxSafeDumper, NxSafeLoader
import networkx as nx
import matplotlib.pyplot as plt
from discopy import braided, cat, monoidal, frobenius, symmetric

Id = monoidal.Id
Ty = monoidal.Ty

class Sig(monoidal.Bubble):
    """
    The monoidal signature based on a directed graph
    An arrow in the free category generated by the signature
    """
    def __init__(self, graph: nx.DiGraph, dom, cod):

        diagram = Id().tensor(*(
            monoidal.Box(
                node,
                Ty(*sorted(graph.predecessors(node))),
                Ty(node, *sorted(graph.successors(node))))
            if node else Id()
            for node in sorted(graph.nodes)))
        super().__init__(diagram,
                         dom=dom,#*sorted(n for n in graph.nodes if graph.in_degree(n) == 0)),
                         cod=cod)#*sorted(graph.nodes)))

def compose_all():
    for f in sys.argv[1:]:
        yield from yaml.compose_all(open(f), Loader=NxSafeLoader)

G = Id()
nodes = nx.DiGraph()
for H in compose_all():
    G >>= Sig(H, dom=Ty(*sorted(nodes.nodes)), cod=Ty(*sorted(H.nodes)))
    nodes.add_nodes_from(H)
    # G.draw()
    G = G.normal_form()
    G.draw()
